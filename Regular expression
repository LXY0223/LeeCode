class Solution{
    public boolean isMath(String s,String p){
        if (p == null || s == null){
            return false;
        }
        if (s.length() >= 1 && p.length() < 1){
            return false;
        }
        int i = 0,j = 0;
        return match(s,i,p,j);
    }
    private boolean match(String s,int i,String p,int j){
        if (i >= s.length() && j >= p.length()){
            return true;
        }
        if (i < s.length() && j >= p.length()){
            return false;
        }
        if (j+1 < p.length() && p.charAt(j+1) != '*' || p.length() == j+1){
            if (i < s.length() && (s.charAt(i) == p.charAt(j) || p.charAt(j) == '.')){
                return match(s,i+1,p,j+1);
            }else {
                return false;
            }
        }else {
            if ((i < s.length() && s.charAt(i) != p.charAt(j) && p.charAt(j) != '.') || i == s.length()){
                return match(s,i,p,j+2);
            }else {
                return match(s,i,p,j+2)|| match(s,i+1,p,j) || match(s,i+1,p,j+2);
            }
        }
    }
}
//思路（参考别人的）：递归
1.如果两个字符串都为空，则返回true
2.当第一个字符串不空，第二个字符串空了，返回false
3.在比较字符的过程中，如果p的下一个字符为*或不为*，则情况不同，分情况讨论
（1）如果下一个字符不为*，直接匹配当前字符。若匹配成功，继续匹配下一个；若失败，则返回false。
（2）如果下一个字符为*，分情况讨论：
     （i）当*匹配0个字符时，s当前字符不变，p当前字符后移2位，相当于跳过*符号后面来匹配。
     （ii）当*匹配1个字符时，s当前字符向后移1位，p当前字符向后移2位。
     （iii）当*匹配多个字符时，s当前字符向后移1位，p当前字符不移动。
